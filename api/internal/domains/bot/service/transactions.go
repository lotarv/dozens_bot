package service

import (
	"context"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TransactionStep int

const (
	Idle TransactionStep = iota
	AwaitingMember
	AwaitingAmount
	AwaitingReason
)

type TransactionSession struct {
	Step           TransactionStep
	IsDeposit      bool
	IsPenalty      bool
	Amount         int
	MemberUsername string
}

var transactionSessions = make(map[int64]*TransactionSession)

func (s *BotService) StartNewTransaction(userID int64) {
	msg := tgbotapi.NewMessage(userID, "–ß—Ç–æ —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å?")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ", "start_penalty"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å (–Ω–µ —à—Ç—Ä–∞—Ñ)", "start_deposit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å", "start_withdraw"),
		),
	)
	s.bot.Send(msg)
}

func (s *BotService) handleTransactionStep(msg *tgbotapi.Message, session *TransactionSession) {
	userID := msg.From.ID
	text := strings.TrimSpace(msg.Text)

	//TODO: –≤—ã—á–∏—Å–ª—è—Ç—å –¥–µ—Å—è—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
	switch session.Step {
	case AwaitingAmount:
		amount, err := strconv.Atoi(text)
		if err != nil || amount <= 0 {
			s.bot.Send(tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É"))
			return
		}
		if !(session.IsDeposit || session.IsPenalty) {
			amount = -amount
		}
		session.Amount = amount
		session.Step = AwaitingReason
		if session.IsPenalty {
			s.bot.Send(tgbotapi.NewMessage(userID, "–ó–∞ —á—Ç–æ —à—Ç—Ä–∞—Ñ?"))
		} else if session.IsDeposit {
			s.bot.Send(tgbotapi.NewMessage(userID, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"))
		} else {
			s.bot.Send(tgbotapi.NewMessage(userID, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:"))
		}
	case AwaitingReason:
		reason := text

		err := s.repo.ChangeBankBalance(context.Background(), 1, session.Amount, reason, session.MemberUsername)
		if err != nil {
			s.bot.Send(tgbotapi.NewMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"))
		} else {
			s.bot.Send(tgbotapi.NewMessage(userID, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∞"))
		}
		// üßπ –ß–∏—Å—Ç–∏–º
		delete(transactionSessions, userID)
	}
}

func (s *BotService) askForTransactionMember(userID int64) {
	//TODO: –≤—ã—á–∏—Å–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–µ—Å—è—Ç–∫–∏ —á–µ–ª–æ–≤–µ–∫–∞
	members, err := s.repo.GetMembers()
	if err != nil {
		s.bot.Send(tgbotapi.NewMessage(userID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"))
		// üßπ –ß–∏—Å—Ç–∏–º
		delete(transactionSessions, userID)
		return
	}
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, m := range members {
		btn := tgbotapi.NewInlineKeyboardButtonData(m.FullName, "select_member_"+m.Username)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(btn))
	}

	msg := tgbotapi.NewMessage(userID, "–ß–µ–π —à—Ç—Ä–∞—Ñ?")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	s.bot.Send(msg)

}
